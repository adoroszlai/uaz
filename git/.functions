#!/bin/bash
#
# Functions for git and GitHub
#
# requirements:
# - env: GITHUB_USER, ISSUES_DIR
# - git
# - hub (for 'hub-*')

git-update-fork-from-origin() {
  # Updates current branch in the remote "${GITHUB_USER}" from the remote "origin"

  local branch=$(git branch | grep '^\*' | cut -f2 -d' ')
  [[ -n ${branch} ]] || return 1
  git fetch origin && \
    git merge --ff-only origin/${branch} && \
    git push ${GITHUB_USER} ${branch}
}

git-changed-since() {
  # Checks if the given file has changed compared to the given ref
  # returns 0 if changed, otherwise 1
  # example: git-changed-since origin/trunk ~/src/ambari ambari-server/pom.xml

  local ref=$1
  local work_dir=$2
  local file=$3
  if [[ $(git -C ${work_dir} diff --name-status ${ref} -- ${file} | cut -f1) == M ]]; then
    return 0
  else
    return 1
  fi
}

git-edit-conflict() {
  # Edit conflicting files (during a merge) using $VISUAL

  [[ -n ${VISUAL} ]] || return 1
  local conflicts=$(echo $(git status | grep 'both modified:' | awk '{ print $3 }'))
  [[ -z ${conflicts} ]] || eval "${VISUAL} ${conflicts}"
}

git-branch-issue() {
  # Guess Jira issue ID (eg. BUG-12345) from branch name
  # prints issue ID if found
  # returns 0 if found, otherwise non-zero

  local issue=$(git status -s -b | head -1 | perl -wpl -e 's/^## (\w+-\d+).*/$1/')
  if [[ -z "${issue}" ]]; then
    return 1
  elif [[ "${issue##\#\# }" != "${issue}" ]]; then
    echo "Cannot guess issue ID from current branch" >&2
    return 2
  else
    echo ${issue}
  fi
}

edit-pull-request() {
  # Start editing a file with pull request title and description

  local issue=$(git-branch-issue)
  local subject=$(git log --format='%s' HEAD^..HEAD | grep "${issue}" | perl -wpl -e "s/^\[?${issue}\]? ?[-.:]? /[${issue}] /")
  [[ -n ${issue} ]] || return 1
  [[ -d ${ISSUES_DIR} ]] || return 2
  dir=${ISSUES_DIR}/${issue}
  mkdir -p ${dir}
  file=${dir}/pullrequest.md
  if [[ ! -s ${file} ]]; then
    echo "${subject}" >> ${file}
    echo "" >> ${file}
    [[ -e .github/PULL_REQUEST_TEMPLATE.md ]] && cat .github/PULL_REQUEST_TEMPLATE.md >> ${file}
  fi
  eval "${VISUAL} ${file}"
}

hub-pull-request() {
  # Create pull request for current branch.
  # Takes PR title and description from $ISSUES_DIR/<issue>/pullrequest.md
  #
  # usage: hub-pull-request -b <base branch> ... (any other option for hub)

  local issue=$(git-branch-issue)
  [[ -n ${issue} ]] || return 1
  dir=${ISSUES_DIR}/${issue}
  md=${dir}/pullrequest.md
  if [[ ! -e ${dir} ]]; then
    echo "Cannot find source directory: ${dir}" >&2
    return 2
  elif [[ ! -e ${md} ]]; then
    echo "Cannot find pull request file: ${md}" >&2
    return 3
  else
    hub pull-request -o -F "${md}" -a "${GITHUB_USER}" "$@"
  fi
}

git-changed-tests() {
  # Prints list of "tests" changed by the given commit, separated by commas (this format is suitable for eg. Maven Surefire's -Dtest=...)

  local ref=${1:-HEAD}
  echo $(git show --name-status ${ref} | fgrep Test | grep "^[AM]" | awk -F'/' '{ print $NF }' | cut -f1 -d. | sort -u) | sed "s/ /,/g"
}
